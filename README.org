#+title: jiro2dsl.py: 英辞郎のテキスト形式辞書を GoldenDict で使える DSL 形式に変換する
#+author: [[https://terada.org/masayuki/][Masayuki Terada]]
#+created: {{{time(%Y-%m-%d)}}}
# -*- mode: org; coding: utf-8-unix -*-

[[https://www.eijiro.jp/get-144.htm][英辞郎のテキスト形式 (いわゆる「辞郎形式」) 辞書]]を，[[http://goldendict.org/][GoldenDict]] などの
辞書引きツールで利用可能な [[http://lingvo.helpmax.net/en/troubleshooting/dsl-compiler/][ABBYY Lingvo DSL 形式]]に変換します．

[[./sample1.png]]

* 特徴

[[http://www.eijiro.jp/spec.htm][英辞郎データ形式の説明]]に基づき，辞書エントリの構造を (ある程度) DSL 形
式の構造に対応づけて変換します．これにより，GoldenDict などの辞書引き
ツールで，訳の内容や例文，補足説明などがインデントされたり色付けされた
りして見やすくなります．

このプログラムが解釈する英辞郎の辞書エントリの構造・特殊文字は以下の通
りです．

  - エントリの先頭 ("■") と末尾 (改行)
  - 見出語 (+品詞) と訳語の境界 (" : ")
  - 訳語と補足説明の境界 ("◆")
  - 訳語と例文の境界 ("■・")
  - 品詞 (Part of Speech) ("{名-1}" など)
  - 他の見出し語へのリンク ("<→cutoff>" など)
  - 隅付き括弧のラベル ("【発音】" など)．隅付き括弧以外のラベル
    ("〈米〉" "《医》" など) は特別扱いしません．

なお，このプログラムは Python で書かれた (モダンな) 文法解析ライブラリ
である [[https://github.com/lark-parser/lark][Lark (lark-parser)]] を用いて英辞郎テキスト形式の構造を解釈してい
ます．というか Lark を試してみたくてついかっとなって作ってしまいました．
後悔は多少しています．

* 使い方

まずは[[https://www.eijiro.jp/get-144.htm][英辞郎のテキストデータ]]を入手してください．英辞郎のテキストデータ
は EDP の著作物であり，有料で販売されています．後述の通り *動作テスト
用テキストデータには対応していません* ので注意してください．

動作環境は Python3.6+ を前提とします (f-strings を使っているため)．
Python3.6+ を利用可能な環境で，

  1. [[https://github.com/lark-parser/lark][Lark]] をインストール (=pip install lark-parser=; *lark ではなく
     lark-parser* であることに注意) した後，
  2. [[https://raw.githubusercontent.com/tera-p/jiro2dsl/master/rangestr.py][rangestr.py]] と [[https://raw.githubusercontent.com/tera-p/jiro2dsl/master/jiro2dsl.py][jiro2dsl.py]] をダウンロードし，
  3. =./jiro2dsl.py EIJIRO-1445.TXT= などとして実行してください．

詳細な使い方は =jiro2dsl.py -h= で表示される usage を参照してください
(下記に引用します)．

#+begin_example
% ./jiro2dsl.py -h
usage: jiro2dsl.py [-h] [-o OUTFILE] [-e ENCODING] [-l LINES] infile

英辞郎テキスト形式の辞書を Lingvo DSL 形式辞書に変換する．

positional arguments:
  infile                変換元の辞書名 (英辞郎テキスト形式)

optional arguments:
  -h, --help            show this help message and exit
  -o OUTFILE, --outfile OUTFILE
                        変換先の辞書名 (既定: infile から自動生成)
  -e ENCODING, --encoding ENCODING
                        変換元辞書のエンコーディング (既定: cp932)
  -l LINES, --lines LINES
                        変換対象行の範囲 (既定: 変換元辞書全体)

OUTFILE が省略された場合，infile の拡張子を ".dsl" に置換した名前
が用いられる．出力エンコーディングは GoldenDict の仕様に合わせて
*BOM 付き* UTF-8 (utf-8-sig) 固定とする．

ENCODING には Python におけるエンコーディング名を与える．省略時は
cp932 が用いられる．変換元辞書のエンコーディングが UTF-8 の場合，
陽に utf-8 と指定すること．

LINES は，印刷時のページ範囲指定などで一般に用いられる記法によって
指定する．この記法は以下の規則に従う．

  - カンマ区切りで行番号 (先頭行は 1 とする) または行の範囲を指定
    する．出力は行番号の昇順にソートされ，重複は排除される．
  - 行の範囲は開始行と終了行をハイフンで結合して指定する．たとえば
    "3-7" は "3,4,5,6,7" と同じ意味である．
  - 開始行と終了行のいずれかは省略できる．それぞれ省略時には辞書の
    先頭行と末尾行を意味する．

たとえば infile が 10 行のとき，"-2, 4-6, 9-" と "1-2, 4-6, 9-10"，
および "1,2,4,5,6,9,10" はいずれも同じ意味として扱われる．
#+end_example

* 注意事項

英辞郎の辞書は巨大なので，すべてのエントリが「データ形式の説明」に厳密
に従っているとは限りません (仕様の揺れや誤記も含まれています; たとえば
品詞の波括弧が二重になっていたり，ラベルの隅付き括弧が非対称だったり，
リンクの矢印の後に空白があったりなかったり)．手作業でこれだけ膨大な辞
書を作られていることを考えると，やむを得ないところと思いますが．

これらの不具合は可能な限りプログラム側で対応しており，英辞郎 144.5 版
(=EIJIRO-1445.TXT=) に含まれる範囲についてはエラーなく変換できることを
確認していますが，それ以外の版でどういう結果になるかはわかりません．変
換中に文法エラーが発生した場合は，エラーを参考に文法か辞書自体を書き換
えてください．このプログラムでは (半分は Lark のお勉強を兼ねて，半分は
意地で :p) すべての仕様の揺れや誤記を文法側で解決していますが，副作用
を気にしながら文法をいじるよりは辞書自体を修正してしまうほうが楽だと思
います．

なお， *英辞郎の[[https://www.eijiro.jp/dousa-test-144.htm][動作テスト用テキストデータ]]は伏せ字によってデータ形式の
構造が破壊されているため，本プログラムで全エントリは変換できません．*
部分的に変換できるエントリ (伏せ字が構造に影響しないエントリ) もありま
すので，どんな感じで変換されるか試してみたい場合は =--lines= オプショ
ンを用いて変換可能なエントリを抜き出してお試しください．

* 技術的な話

辞書を解析する際の文法は =Jiro2DSL.rule= を参照してください．Lark の
EBNF で書かれています．高速化のために LALR(1) で受理可能としていますが，
前述の英辞郎テキストデータの表記揺れや誤記に対応する必要上，かなり汚い
文法になっています (パーザ初期化時に =debug=True= とすると，たくさんの
Shift/Reduce conflicts 警告が出てきます)．ちょっとの変更により (ルール
適用の優先度が変わって) 別のところでエラーを引き起こすこともあるので，
改造の際は留意してください．

どの文法要素 (非終端記号) を DSL 形式におけるどのタグに対応させるかは
=Jiro2DSL.tagconf= で設定しています．構成は以下の通りです:

  - key が非終端記号名，value がリストの Python 辞書です．
  - (value における) リストの要素は文字列またはタプル (2-tuple) であり，
    - 文字列の場合はその文字列をタグ名としたタグで囲み (例: ="foo"= な
      ら =[foo]= と =[/foo]= で囲む)，
    - タプルの場合は与えられたタプルの要素で囲みます (例: =("[c foo]",
      "[/c]")= なら =[c foo]= と =[/c]= で囲む)．
  - リストの各要素は，前にあるほうが外側になります．たとえば，value が
    =["foo", "bar"]= なら =[foo][bar]= と =[/bar][/foo]= で囲みます．

詳細は =Jiro2DSL.__default__()= および =Jiro2DSL._entag()= を参照して
ください．f-strings の中で再帰している点に注意すれば，あまり難しいこと
はしていません．

=Jiro2DSL.tagconf= の値を書き換えれば，見ばえを容易に変更できますし，
HTML 出力などへの対応もそれほど難しくないと思われます．こちらは変更し
ても大きな副作用はないはずなので，好みや使い方に合わせて好きに修正して
ください．

* ライセンス

[[https://www.gnu.org/licenses/old-licenses/gpl-2.0.html][GPLv2]] に従うものとします (Lark で生成された [[https://github.com/lark-parser/lark#license][standalone tool は GPL2 に
従う]]とされているため，本プログラムを元にして standalone 版を作成するこ
とを考慮してライセンスを合わせます)．

なお，当然ながら上記のライセンスは英辞郎テキストデータを変換した DSL
形式辞書には及びません．英辞郎テキストデータの[[https://www.eijiro.jp/kiyaku.htm][利用規約]]に沿って，適切に
利用してください．
